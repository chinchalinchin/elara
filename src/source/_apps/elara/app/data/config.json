{
    "VERSION": "1.0",
    "INTERFACE": {
        "HELP": {
            "PARSER": "Plumb the depths of generative AI.",
            "SUBPARSER": "Available operations: (analyze, configure, clear, converse, summarize, display, review, request, show)"
        },
        "ARGUMENTS": {
            "PROMPT": {
                "DEFAULT": "Hello! Form is the possibility of structure!",
                "DEST": "prompt",
                "HELP": "The prompt to contextualize and forward to the Gemini API.",
                "SYNTAX": [
                    "-p",
                    "--p",
                    "-prompt",
                    "--prompt"
                ],
                "TYPE": "str"
            },
            "DIRECTORY": {
                "DEFAULT": null,
                "DEST": "directory",
                "HELP": "The path to the directory to summarize and inject into the prompt.",
                "SYNTAX": [
                    "-d",
                    "--d",
                    "-directory",
                    "--directory"
                ],
                "TYPE": "str"
            },
            "MODEL": {
                "DEFAULT": null,
                "DEST": "currentModel",
                "HELP": "The full model path of Gemini to use, e.g. `models/gemini-1.5-pro-latest`, `models/gemini-2.0-flash-exp`, etc. Defaults to the value of the `GEMINI_MODEL` environment variable.",
                "SYNTAX": [
                    "-m",
                    "--m",
                    "-model",
                    "--model"
                ],
                "TYPE": "str"
            },
            "PERSONA": {
                "DEFAULT": null,
                "DEST": "currentPersona",
                "HELP": "The persona for Gemini to assume, e.g. `elara`, `axiom`, etc. Defaults to the value of the `GEMINI_PERSONA` environment variable.",
                "SYNTAX": [
                    "-r",
                    "--r",
                    "-persona",
                    "--persona"
                ],
                "TYPE": "str"
            },
            "IDENTITY": {
                "DEFAULT": null,
                "DEST": "currentPrompter",
                "HELP": "The name of the prompter, e.g. `Aristotle`, `Euler`, etc. Defaults to the value of the `GEMINI_PROMPTER` environment variable.",
                "SYNTAX": [
                    "-i",
                    "--i",
                    "-identity",
                    "--identity"
                ],
                "TYPE": "str"
            },
            "VIEW": {
                "DEFAULT": null,
                "DEST": "view",
                "HELP": "Print output to console.",
                "SYNTAX": [
                    "-v",
                    "--v",
                    "-view",
                    "--view"
                ],
                "ACTION": "store_true"
            },
            "OUTPUT": {
                "DEFAULT": null,
                "DEST": "output",
                "HELP": "Save Gemini's response to local directory.",
                "SYNTAX": [
                    "-o",
                    "--o",
                    "-output",
                    "--output"
                ],
                "TYPE": "str"
            },
            "RENDER": {
                "ACTION": "store_true",
                "DEFAULT": false,
                "DEST": "render",
                "HELP": "Render template without sending to Gemini API.",
                "SYNTAX": [
                    "-e",
                    "--e",
                    "-render",
                    "--render"
                ]
            },
            "CONCEPTS": {
                "DEFAULT": null,
                "DEST": "concepts",
                "HELP": "List of words to initiate brainstorm session",
                "NARGS": "*",
                "TYPE": "str"
            },
            "PULL": {
                "DEFAULT": null,
                "DEST": "pull",
                "HELP": "Pull request number to review.",
                "SYNTAX": [
                    "-u",
                    "--u",
                    "-pull",
                    "--pull"
                ],
                "TYPE": "str"
            },
            "REPOSITORY": {
                "DEFAULT": null,
                "DEST": "repository",
                "HELP": "Name of the remote repository to review.",
                "SYNTAX": [
                    "-t",
                    "--t",
                    "-repository",
                    "--repository"
                ],
                "TYPE": "str"
            },
            "OWNER": {
                "DEFAULT": null,
                "DEST": "owner",
                "HELP": "Username of the repository owner that is being review.",
                "SYNTAX": [
                    "-w",
                    "--w",
                    "-owner",
                    "--owner"
                ],
                "TYPE": "str"
            },
            "CONFIGURE": {
                "DEFAULT": null,
                "DEST": "configure",
                "HELP": "Key-value pairs to inject into application configuration.",
                "NARGS": "*",
                "TYPE": "str"
            },
            "CLEAR": {
                "DEFAULT": null,
                "DEST": "clear",
                "HELP": "List of personas to purge",
                "NARGS": "*",
                "TYPE": "str"
            }
        },
        "OPERATIONS": [
            {
                "NAME": "converse",
                "HELP": "Chat with a Gemini model persona.",
                "ARGUMENTS": [
                    "PROMPT",
                    "DIRECTORY",
                    "MODEL",
                    "PERSONA",
                    "IDENTITY",
                    "VIEW",
                    "OUTPUT",
                    "RENDER"
                ]
            },
            {
                "NAME": "brainstorm",
                "HELP": "Orchestrate a brainstorming session with the personas by providing a list of key-words.",
                "ARGUMENTS": [
                    "VIEW",
                    "OUTPUT",
                    "CONCEPTS",
                    "RENDER",
                    "DIRECTORY"
                ]
            },
            {
                "NAME": "request",
                "HELP": "Template a Gherkin-style feature request and post it to the Gemini API.",
                "ARGUMENTS": [
                    "RENDER",
                    "VIEW",
                    "OUTPUT"
                ]
            },
            {
                "NAME": "summarize",
                "HELP": "Generate an RST formatted summary of a local directory. Summary will be written to the directory it is summarizing.",
                "ARGUMENTS": [
                    "DIRECTORY",
                    "VIEW",
                    "OUTPUT"
                ]
            },
            {
                "NAME": "review",
                "HELP": "Generate an RST formatted summary of a local git repository and then send it to `milton` for code review.",
                "ARGUMENTS": [
                    "RENDER",
                    "DIRECTORY",
                    "PULL",
                    "REPOSITORY",
                    "OWNER",
                    "MODEL",
                    "PERSONA",
                    "IDENTITY",
                    "VIEW",
                    "OUTPUT"
                ]
            },
            {
                "NAME": "configure",
                "DEFAULT": null,
                "HELP": "Set configuration values as key-value pairs (e.g., `models/gemini-1.5-pro-latest`).",
                "ARGUMENTS": [
                    "CONFIGURE"
                ]
            },
            {
                "NAME": "clear",
                "DEFAULT": null,
                "HELP": "Purge persona data.",
                "ARGUMENTS": [
                    "CLEAR"
                ]
            },
            {
                "NAME": "tune",
                "DEFAULT": null,
                "HELP": "Tune a persona with data in the ``data/tuning`` directory",
                "ARGUMENTS": []
            },
            {
                "NAME": "show",
                "DEFAULT": null,
                "HELP": "Display application metadata.",
                "ARGUMENTS": [
                    "OUTPUT"
                ]
            }
        ],
        "FIELDS": [
            "DEFAULT",
            "DEST",
            "HELP",
            "SYNTAX",
            "ACTION",
            "NARGS",
            "TYPE"
        ]
    },
    "FUNCTIONS": {
        "CONVERSE": {
            "CONFIG": {
                "TIMEZONE_OFFSET": -5,
                "SCHEMA_FILENAME": "_new"
            },
            "SCHEMA": {
                "type": "object",
                "properties": {
                    "feedback": {
                        "type": "string"
                    },
                    "memory": {
                        "type": "string"
                    },
                    "response": {
                        "type": "string"
                    },
                    "next_prompt": {
                        "type": "string"
                    }
                },
                "required": [
                    "response"
                ]
            },
            "MIME": "application/json",
            "TEMPLATE": "converse"
        },
        "BRAINSTORM": {
            "TEMPLATE": "brainstorm"
        },
        "SUMMARIZE": {
            "CONFIG": {
                "DIRECTIVES": {
                    ".py": "python",
                    ".sh": "bash",
                    ".toml": "toml",
                    ".cfg": "toml",
                    ".json": "json",
                    ".html": "html",
                    ".js": "js"
                },
                "INCLUDES": {
                    "EXT": [
                        ".rst",
                        ".md",
                        ".ini",
                        ".txt"
                    ]
                },
                "EXCLUDES": {
                    "EXT":  [
                        ".pyc",
                        ".zip",
                        ".gz"
                    ],
                    "FILE": [
                        "context.json"
                    ],
                    "DIR": []
                }
            },
            "TEMPLATE": "summary"
        },
        "REVIEW": {
            "TEMPLATE": "review",
            "SCHEMA": {
                "type": "object",
                "properties": {
                    "score": {
                        "type": "string",
                        "enum": [
                            "pass",
                            "fail"
                        ]
                    },
                    "overall": {
                        "type": "string"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                },
                                "bugs": {
                                    "type": "string"
                                },
                                "comments": {
                                    "type": "string"
                                },
                                "amendments": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "path",
                                "comments"
                            ]
                        }
                    }
                },
                "required": [
                    "score",
                    "overall"
                ]
            },
            "MIME": "application/json"
        },
        "REQUEST": {
            "TEMPLATE": "request"
        },
        "ANALYZE": {
            "TEMPLATE": "analyze",
            "LATEX_PREAMBLE": "\\usepackage{babel}\n\\babelprovide[import, main]{coptic}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[utf8]{inputenc}\n\\usepackage{lmodern}\n\\usepackage{runic}\n"
        }
    },
    "TREE": {
        "DIRECTORIES": {
            "DATA": "data",
            "HISTORY": "data/history",
            "LANGUAGE": "data/language",
            "MEMORY": "data/memory",
            "TEMPLATES": "data/templates",
            "TOOLS": "data/tools",
            "TUNING": "data/tuning",
            "SYSTEM": "data/system",
            "LOGS": "logs"
        },
        "FILES": {
            "CACHE": "cache.json",
            "CONFIG": "config.json",
            "CONTEXT": "context.json",
            "SUMMARY": "summary.rst",
            "LOG": "elara.log"
        },
        "EXTENSIONS": {
            "TEMPLATE": ".rst",
            "LANGUAGE": ".rst",
            "TUNING": ".json",
            "CONVERSATION": ".json",
            "MEMORY": ".json",
            "SYSTEM": ".json"
        }
    },
    "OBJECTS": {
        "LANGUAGE": {
            "EXTENSION": ".rst",
            "MODULES": {
                "OBJECT": false,
                "INFLECTION": true,
                "VOICE": false,
                "WORDS": false
            }
        },
        "PERSONA": {
            "ELARA": {
                "CONTEXT": {
                    "QUOTATIONS": [
                        "BADI_01",
                        "HEID_01",
                        "SART_01"
                    ],
                    "POEMS": [
                        "ELIO_01",
                        "CUMM_01",
                        "THOM_01"
                    ],
                    "PROOFS": []
                },
                "FUNCTIONS": [
                    "converse"
                ],
                "TOOLS": "code_execution",
                "GENERATION_CONFIG": {
                    "CANDIDATE_COUNT": 1,
                    "MAX_OUTPUT_TOKENS": 100000,
                    "TEMPERATURE": 0.9,
                    "TOP_P": 0.8,
                    "TOP_K": 30
                },
                "SAFETY_SETTINGS": {
                    "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                    "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
                    "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
                    "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE"
                }
            },
            "AXIOM": {
                "CONTEXT": {
                    "QUOTATIONS": [
                        "ARIS_01",
                        "FREG_01",
                        "RUSS_01",
                        "TARS_01",
                        "RSWH_01"
                    ],
                    "POEMS": [],
                    "PROOFS": []
                },
                "FUNCTIONS": [
                    "analyze"
                ],
                "TOOLS": "code_execution",
                "GENERATION_CONFIG": {
                    "CANDIDATE_COUNT": 1,
                    "MAX_OUTPUT_TOKENS": 80000,
                    "TEMPERATURE": 0.9,
                    "TOP_P": 0.9,
                    "TOP_K": 40
                },
                "SAFETY_SETTINGS": {
                    "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                    "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
                    "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
                    "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE"
                }
            },
            "MILTON": {
                "CONTEXT": {
                    "QUOTATIONS": [],
                    "POEMS": [],
                    "PROOFS": []
                },
                "FUNCTIONS": [
                    "review",
                    "request"
                ],
                "TOOLS": "code_execution",
                "GENERATION_CONFIG": {
                    "CANDIDATE_COUNT": 1,
                    "MAX_OUTPUT_TOKENS": 200000,
                    "TEMPERATURE": 0.75,
                    "TOP_P": 0.9,
                    "TOP_K": 10
                },
                "SAFETY_SETTINGS": {
                    "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                    "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
                    "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
                    "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE"
                }
            },
            "VALIS": {
                "CONTEXT": {
                    "QUOTATIONS": [],
                    "POEMS": [],
                    "PROOFS": []
                },
                "FUNCTIONS": [
                    "brainstorm"
                ],
                "TOOLS": "code_execution",
                "GENERATION_CONFIG": {
                    "CANDIDATE_COUNT": 1,
                    "MAX_OUTPUT_TOKENS": 8000,
                    "TEMPERATURE": 0.9,
                    "TOP_P": 0.9,
                    "TOP_K": 40
                },
                "SAFETY_SETTINGS": {
                    "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                    "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
                    "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
                    "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE"
                }
            }
        },
        "REPO": {
            "VCS": "github",
            "AUTH": {
                "TYPE": "bearer",
                "CREDS": null
            },
            "BACKENDS": {
                "GITHUB": {
                    "HEADERS": {
                        "X-GitHub-Api-Version": "2022-11-28",
                        "Accept": "application/vnd.github+json"
                    },
                    "API": {
                        "PR": {
                            "COMMENT": "https://api.github.com/repos/{owner}/{repo}/issues/{pr}/comments",
                            "FILE": "https://api.github.com/repos/{owner}/{repo}/issues/{pr}/pulls"
                        }
                    }
                }
            }
        },
        "TERMINAL": {
            "GHERKIN": {
                "HELP": "Please describe the feature request with Gherkin test language.",
                "BLOCKS": {
                    "FEATURE": "FEATURE\n\tEnter feature name: ",
                    "SCENARIO": "SCENARIO\n\tDescribe the specific scenario in the feature: ",
                    "LANGUAGE": "LANGUAGE\n\tSpecify the desired programming language: ",
                    "GIVEN": "GIVEN\n\tFix the context of the scenario: ",
                    "WHEN": "WHEN\n\tDescribe the action which triggers the scenario: ",
                    "THEN": "THEN\n\tState the expected outcome of the scenario: "
                }
            },
            "CONVERSATION": {
                "DISPLAY": {
                    "PROMPT": "\tPrompt: ",
                    "INIT": "Starting an interactive terminal...",
                    "TITLE": "\n---------------\n  ELARA SHELL  \n---------------\n",
                    "START": "\n\tType exit() to quit.\n\tType help() to see list of commands.\n\n",
                    "HELP": "TODO"
                },
                "COMMANDS": {
                    "EXIT": "exit()",
                    "HELP": "help()"
                },
                "FUNCTIONS": [
                    "currentPersona",
                    "currentPrompter",
                    "directory",
                    "currentModel"
                ]
            }
        }
    },
    "GEMINI": {
        "KEY": null,
        "DEFAULT": "models/gemini-2.0-flash-exp",
        "TUNING": {
            "SOURCE": "models/gemini-1.5-flash-001-tuning"
        }
    },
    "LOGS": {
        "LEVEL": "INFO",
        "SCHEMA": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    },
    "OUTPUT": {
        "PROMPT": "PROMPT: \n\t{content}\n",
        "RESPONSE": "RESPONSE: \n\t{content}\n"
    },
    "OVERRIDES": {
        "GEMINI.TUNING.SOURCE": "GEMINI_TUNING_SOURCE",
        "GEMINI.KEY": "GEMINI_KEY",
        "GEMINI.DEFAULT": "GEMINI_DEFAULT",
        "LANGUAGE.MODULES.OBJECT": "LANGUAGE_MODULES_OBJECT",
        "LANGUAGE.MODULES.INFLECTION": "LANGUAGE_MODULES_INFLECTION",
        "LANGUAGE.MODULES.VOICE": "LANGUAGE_MODULES_VOICE",
        "LANGUAGE.MODULES.WORDS": "LANGUAGE_MODULES_WORDS",
        "CONVERSATION.TIMEZONE_OFFSET": "CONVERSATION_TIMEZONE_OFFSET",
        "ANALYZE.LATEX_PREAMBLE": "ANALYZE_LATEX_PREAMBLE",
        "REPO.VCS": "REPO_VCS",
        "REPO.AUTH.CREDS": "REPO_AUTH_CREDS",
        "VERSION": "VERSION",
        "LOGS.LEVEL": "LOGS_LEVEL"
    }
}