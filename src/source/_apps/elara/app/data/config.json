{
    "VERSION": "1.0",
    "INTERFACE": {
        "HELP": {
            "PARSER": "Plumb the depths of generative AI.",
            "SUBPARSER": "Available operations: (configure, converse, summarize, review, analyze)"
        },
        "OPERATIONS": [
            {
                "NAME": "converse",
                "HELP": "Chat with a Gemini model persona.",
                "ARGUMENTS": [
                    {
                        "DEFAULT": "Hello! Form is the possibility of structure!",
                        "DEST": "prompt",
                        "HELP": "The prompt to contextualize and forward to the Gemini API.",
                        "SYNTAX": [
                            "-p",
                            "--prompt"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "directory",
                        "HELP": "The path to the directory to summarize and inject into the prompt.",
                        "SYNTAX": [
                            "-d",
                            "--directory"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "currentModel",
                        "HELP": "The full model path of Gemini to use, e.g. `models/gemini-1.5-pro-latest`, `models/gemini-2.0-flash-exp`, etc. Defaults to the value of the `GEMINI_PERSONA` environment variable.",
                        "SYNTAX": [
                            "-m",
                            "--model"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "currentPersona",
                        "HELP": "The persona for Gemini to assume, e.g. `elara`, `axiom`, etc. Defaults to the value of the `GEMINI_PERSONA` environment variable.",
                        "SYNTAX": [
                            "-r",
                            "--persona"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "currentPrompter",
                        "HELP": "The name of the prompter, e.g. `Aristotle`, `Euler`, etc. Defaults to the value of the `GEMINI_PROMPTER` environment variable.",
                        "SYNTAX": [
                            "-n",
                            "--name"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "show",
                        "HELP": "Print output to console.",
                        "SYNTAX": [
                            "-s",
                            "--show"
                        ],
                        "ACTION": "store_true"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "output",
                        "HELP": "Save Gemini's response to local directory.",
                        "SYNTAX": [
                            "-o",
                            "--output"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": false,
                        "DEST": "interactive",
                        "HELP": "Start an interactive shell with Gemini's persona.",
                        "SYNTAX": [
                            "-i",
                            "--interactive"
                        ],
                        "ACTION": "store_true"
                    },
                    {
                        "ACTION": "store_true",
                        "DEFAULT": false,
                        "DEST": "render",
                        "HELP": "Render template without sending to Gemini API.",
                        "SYNTAX": [
                            "-e",
                            "--render"
                        ]
                    }
                ]
            },
            {
                "NAME": "brainstorm",
                "HELP": "Orchestrate a brainstorming session with the personas by providing a list of key-words.",
                "ARGUMENTS": [
                    {
                        "DEFAULT": null,
                        "DEST": "show",
                        "HELP": "Print output to console.",
                        "SYNTAX": [
                            "-s",
                            "--show"
                        ],
                        "ACTION": "store_true"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "output",
                        "HELP": "Save Gemini's response to local directory.",
                        "SYNTAX": [
                            "-o",
                            "--output"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "concepts",
                        "HELP": "List of words to initiate brainstorm session",
                        "NARGS": "*",
                        "TYPE": "str"
                    },
                    {
                        "ACTION": "store_true",
                        "DEFAULT": false,
                        "DEST": "render",
                        "HELP": "Render template without sending to Gemini API.",
                        "SYNTAX": [
                            "-e",
                            "--render"
                        ]
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "directory",
                        "HELP": "The path to the directory to summarize and inject into the prompt.",
                        "SYNTAX": [
                            "-d",
                            "--directory"
                        ],
                        "TYPE": "str"
                    }
                ]
            },
            {
                "NAME": "request",
                "HELP": "Template a Gherkin-style feature request and post it to the Gemini API.",
                "ARGUMENTS": [
                    {
                        "ACTION": "store_true",
                        "DEFAULT": false,
                        "DEST": "render",
                        "HELP": "Render template without sending to Gemini API.",
                        "SYNTAX": [
                            "-e",
                            "--render"
                        ]
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "show",
                        "HELP": "Print output to console.",
                        "SYNTAX": [
                            "-s",
                            "--show"
                        ],
                        "ACTION": "store_true"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "output",
                        "HELP": "Save Gemini's response to local directory.",
                        "SYNTAX": [
                            "-o",
                            "--output"
                        ],
                        "TYPE": "str"
                    }
                ]
            },
            {
                "NAME": "summarize",
                "HELP": "Generate an RST formatted summary of a local directory. Summary will be written to the directory it is summarizing.",
                "ARGUMENTS": [
                    {
                        "DEFAULT": null,
                        "DEST": "directory",
                        "HELP": "The path to the directory to summarize and inject into the prompt.",
                        "SYNTAX": [
                            "-d",
                            "--directory"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "show",
                        "HELP": "Print output to console.",
                        "SYNTAX": [
                            "-s",
                            "--show"
                        ],
                        "ACTION": "store_true"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "output",
                        "HELP": "Save Gemini's response to local directory.",
                        "SYNTAX": [
                            "-o",
                            "--output"
                        ],
                        "TYPE": "str"
                    }
                ]
            },
            {
                "NAME": "review",
                "HELP": "Generate an RST formatted summary of a local git repository and then send it to `milton` for code review.",
                "ARGUMENTS": [
                    {
                        "ACTION": "store_true",
                        "DEFAULT": false,
                        "DEST": "render",
                        "HELP": "Render template without sending to Gemini API.",
                        "SYNTAX": [
                            "-e",
                            "--render"
                        ]
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "directory",
                        "HELP": "The path to the VCS repository to summarize and inject into the pull request review.",
                        "SYNTAX": [
                            "-d",
                            "--directory"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "pull",
                        "HELP": "Pull request number to review.",
                        "SYNTAX": [
                            "-u",
                            "--pull"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "repository",
                        "HELP": "Name of the remote repository to review.",
                        "SYNTAX": [
                            "-t",
                            "--repository"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "owner",
                        "HELP": "Username of the repository owner that is being review.",
                        "SYNTAX": [
                            "-w",
                            "--owner"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "currentModel",
                        "HELP": "The full model path of Gemini to use, e.g. `models/gemini-1.5-pro-latest`, `models/gemini-2.0-flash-exp`, etc. Defaults to the value of the `GEMINI_PERSONA` environment variable.",
                        "SYNTAX": [
                            "-m",
                            "--model"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "currentPersona",
                        "HELP": "The persona for Gemini to assume, e.g. `elara`, `axiom`, etc. Defaults to the value of the `GEMINI_PERSONA` environment variable.",
                        "SYNTAX": [
                            "-r",
                            "--persona"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "currentPrompter",
                        "HELP": "The name of the prompter, e.g. `Aristotle`, `Euler`, etc. Defaults to the value of the `GEMINI_PROMPTER` environment variable.",
                        "SYNTAX": [
                            "-n",
                            "--name"
                        ],
                        "TYPE": "str"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "show",
                        "HELP": "Print output to console.",
                        "SYNTAX": [
                            "-s",
                            "--show"
                        ],
                        "ACTION": "store_true"
                    },
                    {
                        "DEFAULT": null,
                        "DEST": "output",
                        "HELP": "Save Gemini's response to local directory.",
                        "SYNTAX": [
                            "-o",
                            "--output"
                        ],
                        "TYPE": "str"
                    }
                ]
            },
            {
                "NAME": "configure",
                "DEFAULT": null,
                "HELP": "Set configuration values as key-value pairs (e.g., `models/gemini-1.5-pro-latest`).",
                "ARGUMENTS": [
                    {
                        "DEFAULT": null,
                        "DEST": "config",
                        "HELP": "Key-value pairs to inject into application configuration.",
                        "NARGS": "*",
                        "TYPE": "str"
                    }
                ]
            },
            {
                "NAME": "tune",
                "DEFAULT": null,
                "HELP": "Tune a persona with data in the ``data/tuning`` directory",
                "ARGUMENTS": []
            }
        ]
    },
    "TREE": {
        "DIRECTORIES": {
            "DATA": "data",
            "HISTORY": "data/history",
            "LANGUAGE": "data/language",
            "MEMORY": "data/memory",
            "TEMPLATES": "data/templates",
            "TOOLS": "data/tools",
            "TUNING": "data/tuning",
            "SYSTEM": "data/system",
            "LOGS": "data/logs"
        },
        "FILES": {
            "CACHE": "cache.json",
            "CONFIG": "config.json",
            "CONTEXT": "context.json",
            "SUMMARY": "summary.rst",
            "LOG": "elara.log"
        },
        "EXTENSIONS": {
            "TEMPLATE": ".rst",
            "LANGUAGE": ".rst",
            "TUNING": ".json",
            "CONVERSATION": ".json",
            "MEMORY": ".json"
        }
    },
    "LANGUAGE": {
        "EXTENSION": ".rst",
        "MODULES": {
            "OBJECT": false,
            "INFLECTION": true,
            "VOICE": false,
            "WORDS": true
        }
    },
    "PERSONA": {
        "ELARA": {
            "CONTEXT": {
                "QUOTATIONS": [
                    "HEID_01",
                    "SART_01"
                ],
                "POEMS": [
                    "ELIO_01",
                    "CUMM_01"
                ],
                "PROOFS": []
            },
            "FUNCTIONS": [
                "converse"
            ],
            "TOOLS": "code_execution",
            "GENERATION_CONFIG": {
                "CANDIDATE_COUNT": 1,
                "MAX_OUTPUT_TOKENS": 2048,
                "TEMPERATURE": 0.9,
                "TOP_P": 0.95,
                "TOP_K": 60
            },
            "SAFETY_SETTINGS": {
                "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
                "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
                "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE"
            }
        },
        "AXIOM": {
            "CONTEXT": {
                "QUOTATIONS": [],
                "POEMS": [],
                "PROOFS": []
            },
            "FUNCTIONS": [
                "analyze"
            ],
            "TOOLS": "code_execution",
            "GENERATION_CONFIG": {
                "CANDIDATE_COUNT": 1,
                "MAX_OUTPUT_TOKENS": 8000,
                "TEMPERATURE": 0.9,
                "TOP_P": 0.9,
                "TOP_K": 40
            },
            "SAFETY_SETTINGS": {
                "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
                "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
                "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE"
            }
        },
        "MILTON": {
            "CONTEXT": {
                "QUOTATIONS": [],
                "POEMS": [],
                "PROOFS": []
            },
            "FUNCTIONS": [
                "review",
                "request"
            ],
            "TOOLS": "code_execution",
            "GENERATION_CONFIG": {
                "CANDIDATE_COUNT": 1,
                "MAX_OUTPUT_TOKENS": 8000,
                "TEMPERATURE": 0.9,
                "TOP_P": 0.9,
                "TOP_K": 40
            },
            "SAFETY_SETTINGS": {
                "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
                "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
                "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE"
            }
        },
        "VALIS": {
            "CONTEXT": {
                "QUOTATIONS": [],
                "POEMS": [],
                "PROOFS": []
            },
            "FUNCTIONS": [
                "brainstorm"
            ],
            "TOOLS": "code_execution",
            "GENERATION_CONFIG": {
                "CANDIDATE_COUNT": 1,
                "MAX_OUTPUT_TOKENS": 8000,
                "TEMPERATURE": 0.9,
                "TOP_P": 0.9,
                "TOP_K": 40
            },
            "SAFETY_SETTINGS": {
                "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
                "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
                "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE"
            }
        }
    },
    "CONVERSATION": {
        "TIMEZONE_OFFSET": -5
    },
    "PROMPT": {
        "PROMPTER": "grant",
        "DEFAULT": "Hello! Form is the possibility of structure!"
    },
    "CONVERSE": {
        "TEMPLATE": "conversation",
        "SCHEMA": {
            "type": "object",
            "properties": {
                "feedback": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                }
            },
            "required": [
                "response"
            ]
        }
    },
    "BRAINSTORM": {
        "TEMPLATE": "conversation"
    },
    "SUMMARIZE": {
        "DIRECTIVES": {
            ".py": "python",
            ".sh": "bash",
            ".toml": "toml",
            ".cfg": "toml",
            ".json": "json",
            ".html": "html",
            ".js": "js"
        },
        "INCLUDES": [
            ".rst",
            ".md",
            ".ini",
            ".txt"
        ],
        "EXCLUDES": [
            ".pyc",
            ".zip",
            ".gz"
        ],
        "TEMPLATE": "summary"
    },
    "REVIEW": {
        "TEMPLATE": "review",
        "SCHEMA": {
            "type": "object",
            "properties": {
                "score": {
                    "type": "string",
                    "enum": [
                        "pass",
                        "fail"
                    ]
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "file_path": {
                                "type": "string"
                            },
                            "potential_bugs": {
                                "type": "string"
                            },
                            "potential_optimizations": {
                                "type": "string"
                            },
                            "general_comments": {
                                "type": "string"
                            },
                            "amended_code": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path",
                            "general_comments"
                        ]
                    }
                }
            },
            "required": [
                "score",
                "files"
            ]
        }
    },
    "ANALYZE": {
        "LATEX_PREAMBLE": "\\usepackage{babel}\n\\babelprovide[import, main]{coptic}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[utf8]{inputenc}\n\\usepackage{lmodern}\n\\usepackage{runic}\n"
    },
    "REPO": {
        "VCS": "github",
        "AUTH": {
            "TYPE": "bearer",
            "CREDS": null
        },
        "BACKENDS": {
            "GITHUB": {
                "HEADERS": {
                    "X-GitHub-Api-Version": "2022-11-28",
                    "Accept": "application/vnd.github+json"
                },
                "API": {
                    "PR": {
                        "ISSUE": "https://api.github.com/repos/{owner}/{repo}/issues/{pr}/comments",
                        "LINE": "https://api.github.com/repos/{owner}/{repo}/issues/{pr}/pulls"
                    }
                }
            }
        }
    },
    "TERMINAL": {
        "GHERKIN": {
            "HELP": "Please describe the feature request with Gherkin test language.",
            "BLOCKS": {
                "FEATURE": "FEATURE\n\tEnter feature name: ",
                "SCENARIO": "SCENARIO\n\tDescribe the specific scenario in the feature: ",
                "LANGUAGE": "LANGUAGE\n\tSpecify the desired programming language: ",
                "GIVEN": "GIVEN\n\tFix the context of the scenario: ",
                "WHEN": "WHEN\n\tDescribe the action which triggers the scenario: ",
                "THEN": "THEN\n\tState the expected outcome of the scenario: "
            }
        },
        "CONVERSATION": {
            "HELP": "Starting an interactive terminal. Type exit() to quit.",
            "KILL": "exit()"
        }
    },
    "TUNING": {
        "ENABLED": false,
        "SOURCE": "models/gemini-1.5-flash-001-tuning"
    },
    "GEMINI": {
        "KEY": null,
        "DEFAULT": "models/gemini-2.0-flash-exp"
    },
    "LOGS": {
        "LEVEL": "INFO",
        "SCHEMA": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    },
    "OUTPUT": {
        "PROMPT": "PROMPT: \n\t{content}\n",
        "RESPONSE": "RESPONSE: \n\t{content}\n"
    },
    "OVERRIDES": {
        "TUNING.SOURCE": "TUNING_SOURCE",
        "TUNING.ENABLED": "TUNING_ENABLED",
        "LANGUAGE.MODULES.OBJECT": "LANGUAGE_MODLES_OBJECT",
        "LANGUAGE.MODULES.INFLECTION": "LANGUAGE_MODLES_INFLECTION",
        "LANGUAGE.MODULES.VOICE": "LANGUAGE_MODULES_VOICE",
        "LANGUAGE.MODULES.WORDS": "LANGUAGE_MODULES_WORDS",
        "CONVERSATION.TIMEZONE_OFFSET": "CONVERSATION_TIMEZONE_OFFSET",
        "ANALYZE.LATEX_PREAMBLE": "ANALYZE_LATEX_PREAMBLE",
        "REPO.VCS": "REPO_VCS",
        "REPO.AUTH.CREDS": "REPO_AUTH_CREDS",
        "VERSION": "VERSION",
        "GEMINI.KEY": "GEMINI_KEY",
        "GEMINI.DEFAULT": "GEMINI_DEFAULT",
        "LOGS.LEVEL": "LOGS_LEVEL"
    }
}