digraph Emptying_Algorithm {
  rankdir=TB;
  node [shape=box, style=filled, fillcolor=lightblue];

  // Input String (using HTML entities)
  Input [label="Input String (t): \"ab&epsilon;c\"", fillcolor=lightgreen];

  // Algorithm Steps (using HTML entities)
  Step1 [label="1. Initialize T = &emptyset;, j = 1, i = 1"];
  Step2 [label="2. While a<sub>i</sub> exists:"];
  Step3 [label="&nbsp;&nbsp;&nbsp;a. If a<sub>i</sub> &ne; &epsilon;:"];
  Step4 [label="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i. T &larr; T &cup; {(j, a<sub>i</sub>)}"];
  Step5 [label="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ii. j &larr; j + 1"];
  Step6 [label="&nbsp;&nbsp;&nbsp;b. i &larr; i + 1"];
  Step7 [label="3. Return T"];

  // Output (using HTML entities)
  Output [label="Output (T): {(1, a), (2, b), (3, c)}", fillcolor=lightgreen];

  // Connections
  Input -> Step1;
  Step1 -> Step2;
  Step2 -> Step3 [label="Yes"];
  Step3 -> Step4 [label="a<sub>i</sub> &ne; &epsilon;"];
  Step4 -> Step5;
  Step5 -> Step6;
  Step3 -> Step6 [label="a<sub>i</sub> = &epsilon;"];
  Step6 -> Step2;
  Step2 -> Step7 [label="No (a<sub>i</sub> does not exist)"];
  Step7 -> Output;

  // Intermediate Values (Optional - for more detailed illustration)
  subgraph cluster_Intermediate {
    label="Intermediate Values";
    style=dashed;
    //node [shape=record]; // Remove this line
    
    IV1 [shape=none, label=<
      <table border="0" cellborder="1" cellspacing="0">
        <tr><td port="f0">i: 1</td><td port="f1">j: 1</td><td port="f2">T: {}</td></tr>
      </table>
    >];
    IV2 [shape=none, label=<
      <table border="0" cellborder="1" cellspacing="0">
        <tr><td port="f0">i: 2</td><td port="f1">j: 2</td><td port="f2">T: {(1, a)}</td></tr>
      </table>
    >];
    IV3 [shape=none, label=<
      <table border="0" cellborder="1" cellspacing="0">
        <tr><td port="f0">i: 3</td><td port="f1">j: 3</td><td port="f2">T: {(1, a), (2, b)}</td></tr>
      </table>
    >];
    IV4 [shape=none, label=<
      <table border="0" cellborder="1" cellspacing="0">
        <tr><td port="f0">i: 4</td><td port="f1">j: 3</td><td port="f2">T: {(1, a), (2, b)}</td></tr>
      </table>
    >];
    IV5 [shape=none, label=<
      <table border="0" cellborder="1" cellspacing="0">
        <tr><td port="f0">i: 5</td><td port="f1">j: 4</td><td port="f2">T: {(1, a), (2, b), (3, c)}</td></tr>
      </table>
    >];
  }

  // Connect steps to intermediate values (Optional)
  Step1 -> IV1;
  Step4 -> IV2 [constraint=false, label="i=1"];
  Step4 -> IV3 [constraint=false, label="i=2"];
  Step6 -> IV4 [constraint=false, label="i=3"];
  Step4 -> IV5 [constraint=false, label="i=4"];
}